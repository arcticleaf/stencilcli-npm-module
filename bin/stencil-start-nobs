#!/usr/bin/env node

var Fs = require('fs');
var JspmAssembler = require('../lib/jspm-assembler');
var Path = require('path');
var Pkg = require('../package.json');
var Program = require('commander');
var Server = require('../server');
var ThemeConfig = require('../lib/theme-config');
var buildConfig = require('../lib/build-config');
var Url = require('url');
var Wreck = require('wreck');
var jsonLint = require('../lib/json-lint');
var versionCheck = require('../lib/version-check');
var themePath = process.cwd();
var dotStencilFilePath = Path.join(themePath, '.stencil');
var themeConfigPath = Path.join(themePath, 'config.json');
var dotStencilFile;
var themeConfig;
var configuration;
var staplerUrl;
var headers;
require('colors');

Program
    .version(Pkg.version)
    .option('-o, --open', 'Automatically open default browser')
    .option('-v, --variation [name]', 'Set which theme variation to use while developing')
    .option('-t, --test', 'Enable QA mode which will bundle all javascript for speed to test locally')
    .option('--tunnel', 'Create a tunnel URL which points to your local server that anyone can use.')
    .option('-e, --theme-editor', 'Run Theme Editor server')
    .option('-n, --no-cache', 'Turns off caching for API resource data per storefront page. The cache lasts for 5 minutes before automatically refreshing.')
    .option('--theme-editor-port [port]', 'Run the Theme Editor on a different port')
    .parse(process.argv);


if (!versionCheck()) {
    return;
}

if (!fileExist(dotStencilFilePath)) {
    return console.error('Error: Please run'.red + ' $ stencil init'.cyan + ' first.'.red);
}

if (!fileExist(Path.join(themePath, 'config.json'))) {
    return console.error('Error: You must have a '.red + 'config.json'.cyan + ' file in your top level theme directory.');
}

// If the value is true it means that no variation was passed in.
if (Program.variation === true) {
    return console.error('Error: You have to specify a value for -v or --variation'.red);
}

// Instantiate themeConfig
themeConfig = ThemeConfig.getInstance(themePath);

if (Program.variation) {
    try {
        themeConfig.setVariationByName(Program.variation);
    } catch (err) {
        return console.error('Error: The variation '.red + Program.variation + ' does not exists in your config.json file'.red);
    }
}

configuration = themeConfig.getConfig();

dotStencilFile = Fs.readFileSync(dotStencilFilePath, {encoding: 'utf-8'});

try {
    dotStencilFile = jsonLint.parse(dotStencilFile, dotStencilFilePath);
} catch (e) {
    return console.error(e.stack);
}

if (!(dotStencilFile.normalStoreUrl) || !(dotStencilFile.customLayouts)) {
    return console.error(
        'Error: Your stencil config is outdated. Please run'.red +
        ' $ stencil init'.cyan + ' again.'.red
    );
}

if(dotStencilFile.dns) {
	const dns = require('evil-dns');
	Object.keys(dotStencilFile.dns).forEach((domain) => {
		console.log(`Evil-dns registering ${domain} with ${dotStencilFile.dns[domain]}`);
		dns.add(domain, dotStencilFile.dns[domain]);
	});
}

headers = {
    'stencil-cli': Pkg.version,
};

if (dotStencilFile.staplerUrl) {
    staplerUrl = dotStencilFile.staplerUrl;
    headers['stencil-store-url'] = dotStencilFile.normalStoreUrl;
} else {
    staplerUrl = dotStencilFile.normalStoreUrl;
}

Wreck.get(
    Url.resolve(staplerUrl, '/stencil-version-check?v=' + Pkg.version),
    {
        headers: headers,
        json: true,
        rejectUnauthorized: false,
    },
    function (err, res, payload) {
        var bundleTask;

        if (err || !payload) {
            console.error(
                'The BigCommerce Store you are pointing to either does not exist or is not available at this time.'.red
            );
        } else if (payload.error) {
            return console.error(payload.error.red);
        } else if (payload.status !== 'ok') {
            console.error(
                'Error: You are using an outdated version of stencil-cli, please run '.red +
                '$ npm install -g @bigcommerce/stencil-cli'.cyan
            );
        } else {
            dotStencilFile.storeUrl = payload.sslUrl;
            dotStencilFile.normalStoreUrl = payload.baseUrl;
            dotStencilFile.stencilServerPort = dotStencilFile.port;

            if (configuration.jspm && Program.test) {
                bundleTask = JspmAssembler.assemble(
                    {
                        bootstrap: configuration.jspm.bootstrap,
                    },
                    themePath
                );

                bundleTask(() => {
                    return startServer();
                });
            } else {
                return startServer();
            }
        }
    }
);

/**
 * Starts up the local Stencil Server as well as starts up BrowserSync and sets some watch options.
 */
function startServer() {
    var params = {
        dotStencilFile: dotStencilFile,
        variationIndex: themeConfig.variationIndex || 0,
        stencilEditorEnabled: Program.themeEditor,
        stencilEditorPort: Program.themeEditorPort || 8181,
        useCache: Program.cache,
        themePath: themePath,
    };

    Server(params, function (err) {
        if (err) {
            throw err;
        }
    });

    if (buildConfig.production) {
        buildConfig.initWorker().production((err) => {
            if (err) {
                throw err;
            }
            console.log(startUpInformation());
            console.log(`{"shippy": {"url":"http://localhost:${dotStencilFile.stencilServerPort}"}}`);
        });
    }
}

/**
 * Check if file exist synchronous
 * @param  {string} path
 * @return {boolean}
 */
function fileExist(path) {
    try {
        return !!Fs.statSync(path);
    }
    catch (e) {
        return false;
    }
}

/**
 * Displays information about your environment and configuration.
 * @return {string}
 */
function startUpInformation() {
    var information = '\n';

    information += '-----------------Startup Information-------------\n'.gray;
    information += '\n';
    information += '.stencil location: ' + dotStencilFilePath.cyan + '\n';
    information += 'config.json location: ' + themeConfigPath.cyan + '\n';
    information += 'Store URL: ' + dotStencilFile.normalStoreUrl.cyan + '\n';

    if (dotStencilFile.staplerUrl) {
        information += 'Stapler URL: ' + staplerUrl.cyan + '\n';
    }

    information += 'SSL Store URL: ' + dotStencilFile.storeUrl.cyan + '\n';
    information += 'Node Version: ' + process.version.cyan + '\n';
    information += '\n';
    information += '-------------------------------------------------\n'.gray;

    return information;
}
